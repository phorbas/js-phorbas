const { assert, expect } = require('chai')
import { u8_to_hex } from 'u8-utils'
import { cbor_decode, cbor_encode } from 'cbor-codec'
import { poem_lines } from '../poem.jsy'

import { phorbas_hamt } from 'phorbas/esm/index.mjs'
import { with_js_map } from 'phorbas/esm/db/js_map.mjs'
import { with_web_db } from 'phorbas/esm/db/web_db.mjs'

#IF PLAT_NODEJS
  import {tahoe_opaque} from 'phorbas/esm/node/tahoe.mjs'

#ELIF PLAT_WEB
  import {tahoe_opaque} from 'phorbas/esm/web/tahoe.mjs'


describe @ 'hamt poem', @::
  describe @ 'with with_js_map', @::
    it @ 'simple HAMT use', @::>
      await test_hamt_poem @
        tahoe_opaque.with_storage @
          await with_js_map()

    it @ 'syncing HAMT', @::>
      await test_hamt_sync @
        tahoe_opaque.with_storage @
          await with_js_map()

        tahoe_opaque.with_storage @
          await with_js_map()

  if 'undefined' !== typeof indexedDB ::
    describe @ 'with IndexedDB', @::
      it @ 'simple HAMT use', @::>
        await test_hamt_poem @
          tahoe_opaque.with_storage @
            await with_web_db()

      it @ 'syncing HAMT', @::>
        await test_hamt_sync @
          tahoe_opaque.with_storage @
            await with_web_db()

          tahoe_opaque.with_storage @
            await with_web_db()

  ;


async function test_hamt_poem(opaque) ::
  let hamt = phorbas_hamt(opaque).new_root()

  const poem_index = []
  const hamt_eq = [], hamt_root_eq = []
  for let i=0; i<3; i++ ::
    const hamt_0 = hamt
    for const line of poem_lines ::
      const kctx = await opaque.from_content(line)
      poem_index.push(kctx.key_ref)
      hamt = await hamt.add_key @ kctx.store()

    hamt_root_eq.push @ hamt.root === hamt_0.root
    hamt_eq.push @ hamt === hamt_0


  ::
    assert.deepEqual @ hamt_root_eq, [false, true, true]
    assert.deepEqual @ hamt_eq, [false, true, true]

    await hamt.store_root()

    const hex = u8_to_hex @ await hamt.root.encode()
    assert.equal @ hex.length, 2122
    assert.equal @ hex, 'a261684063616d74990100f7f7f7f7f7f7f7f7f7f7f758200b03c536059b29fe6629fd4555e6270111eb2f802744df97fee0b31ec2aaf784f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f758201cd4cd2fd762ce5857128148a5044a251f13222ff1ac5203a40d33fd124031e9f7f7f7f758202197893d10aff07955b8737255b41f6050bfc6fe358e4c2646806708bc4e08a7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f78158200270d80990586f119b0da2521f96505e44417ecb5cef8da80630683d7d4dbdd4f7f7f7f7f7f7f758203b115908fe8cba4c9c074a320996e0d9c5d81fbb4555264266e486cd3a6a6336f758203d592ab440630fb334144425a8cec414b76f6379309875c07f5789524598dd01f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7582053df33a998312ccaf9c2a37029cb00dc54aeefd24443696c7378135e865f8e33f7f7f7f7f7f7f7f7f758205df6e0e2761359d30a8275058e299fcc0381534545f55cf43e41983f5d4c9456f7f7f7f7f7f7f7f7f7f7582068f55d67135b2eb49026874b2e593675875961456a6980af8d83226a743f66f858206926251dc06cdf87c773e72d93aad587c8964838dda015d8bd73717b9863709cf7f7f7f7f758206fcdc9a58e71aaac1b3d66a205985aec87fd14bfe4695632799f79a221730e1af7f7f7f7f7f7f7f7f7f758207ab38f7e9960529360fe013068e6c8f3de331aa241f4f707930a6c8d8eac589df7f7f7f7f7f7f7f7582083c1be0a6b6563c8888f64f079ab0122cb09df010f62777354cca6d0f2ee49e3f7f7f7f7f7f7f758208bee51e03e77615a2e33be7145a9b867a4f3494a02090ce1a71e81d7ca62284df7f7f758208f6b74daa6581a870e0fb79f44c59d3f95f4780544baa8ae50b5ea4076a754adf7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f75820a1c8fa4a3e50c96530ec516a73411843289c0c176cb787c9616dc7ecaa1c2156f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f75820c4acac909a8d70e05822786e6760d2626f92ef687488b07a236888fc8d2bd56bf7f7f7f7f7f7f7f7f7f7f7f75820d16bdaf968fbc0addb1b1e0d4278feb10169dbe4ca38ca77213628dc162f0012f7f7f7f7f7f7f7f7f7f7f7f7f7815820250208128619379b52b1e3ca6641fbb6897abaec70d00fbf09559ab75f54c8b1f7f75820e21ed15f2c262e7e9b61aee0be5bde939a7d2fbf5b6311e95bf38c1243520304f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f75820f3c80c03a4efd9350163bee00cc286dcb0189b35dccbb7480ce825e50bd28f2ff7f7f7f75820f80827afb131c512bfc9b37c45f7a4f9ada460851a7401ecd7aeef072dd063bcf7f7f75820fc64b6fd1bd15f7add9958cb636ac2096da6eb547858124d4edd54a93ecbe9acf7f75820ffc5abd09010c9309f591e154f841be6ae49f8baf41a0a499bb62e8a0455fec7'


  ::
    const hamt_0 = hamt
    hamt = await hamt.add_key @
      await opaque.store @
        cbor_encode @ poem_index

    hamt_root_eq.push @ hamt.root === hamt_0.root
    hamt_eq.push @ hamt === hamt_0

    assert.deepEqual @ hamt_root_eq, [false, true, true, false]
    assert.deepEqual @ hamt_eq, [false, true, true, false]


    await hamt.store_root()

    const hex = u8_to_hex @ await hamt.root.encode()
    assert.equal @ hex.length, 2188
    assert.equal @ hex, 'a261684063616d74990100f7f7f7f7f7f7f7f7f7f7f758200b03c536059b29fe6629fd4555e6270111eb2f802744df97fee0b31ec2aaf784f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f758201cd4cd2fd762ce5857128148a5044a251f13222ff1ac5203a40d33fd124031e9f7f7f7f758202197893d10aff07955b8737255b41f6050bfc6fe358e4c2646806708bc4e08a7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f78158200270d80990586f119b0da2521f96505e44417ecb5cef8da80630683d7d4dbdd4f7f7f7f7f7f7f758203b115908fe8cba4c9c074a320996e0d9c5d81fbb4555264266e486cd3a6a6336f758203d592ab440630fb334144425a8cec414b76f6379309875c07f5789524598dd01f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7582053df33a998312ccaf9c2a37029cb00dc54aeefd24443696c7378135e865f8e33f7f7f7f7f7f7f7f7f758205df6e0e2761359d30a8275058e299fcc0381534545f55cf43e41983f5d4c9456f7f7f7f7f7f7f7f7f7f7582068f55d67135b2eb49026874b2e593675875961456a6980af8d83226a743f66f858206926251dc06cdf87c773e72d93aad587c8964838dda015d8bd73717b9863709cf7f7f7f7f758206fcdc9a58e71aaac1b3d66a205985aec87fd14bfe4695632799f79a221730e1af7f7f7f7f7f7f7f7f7f758207ab38f7e9960529360fe013068e6c8f3de331aa241f4f707930a6c8d8eac589df7f7f7f7f7f7f7f7582083c1be0a6b6563c8888f64f079ab0122cb09df010f62777354cca6d0f2ee49e3f7f7f7f7f7f7f758208bee51e03e77615a2e33be7145a9b867a4f3494a02090ce1a71e81d7ca62284df7f7f758208f6b74daa6581a870e0fb79f44c59d3f95f4780544baa8ae50b5ea4076a754adf7f7f7f7f7f75820962e555393c87165f01264afdd0e9e602c4c492d3013eacbf06b664a859a668bf7f7f7f7f7f7f7f7f7f75820a1c8fa4a3e50c96530ec516a73411843289c0c176cb787c9616dc7ecaa1c2156f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f75820c4acac909a8d70e05822786e6760d2626f92ef687488b07a236888fc8d2bd56bf7f7f7f7f7f7f7f7f7f7f7f75820d16bdaf968fbc0addb1b1e0d4278feb10169dbe4ca38ca77213628dc162f0012f7f7f7f7f7f7f7f7f7f7f7f7f7815820250208128619379b52b1e3ca6641fbb6897abaec70d00fbf09559ab75f54c8b1f7f75820e21ed15f2c262e7e9b61aee0be5bde939a7d2fbf5b6311e95bf38c1243520304f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f75820f3c80c03a4efd9350163bee00cc286dcb0189b35dccbb7480ce825e50bd28f2ff7f7f7f75820f80827afb131c512bfc9b37c45f7a4f9ada460851a7401ecd7aeef072dd063bcf7f7f75820fc64b6fd1bd15f7add9958cb636ac2096da6eb547858124d4edd54a93ecbe9acf7f75820ffc5abd09010c9309f591e154f841be6ae49f8baf41a0a499bb62e8a0455fec7'


async function test_hamt_sync(opaque_src, opaque_dst) ::
  const [hamt_root_ref, poem_ref] = await
    hamt_store_poem @ opaque_src

  ::
    const hamt_src = await
      phorbas_hamt(opaque_src)
        .load_root @ hamt_root_ref

    await validate_poem_with_index @
      opaque_src, poem_ref

    let hamt_dst =
      phorbas_hamt(opaque_dst)
        .new_root()

    const hamt_dst_merge = await hamt_dst.merge(hamt_src)
    await hamt_dst_merge.store_root('key_ref')

  await validate_poem_with_index @
    opaque_dst, poem_ref


async function hamt_store_poem(opaque) ::
  const poem_index = []
  let hamt = phorbas_hamt(opaque).new_root()

  for const line of poem_lines ::
    const kctx = await opaque.store(line)
    poem_index.push(kctx.key_ref)
    hamt = await hamt.add_key(kctx)

  const poem_kctx = await opaque.store @
    cbor_encode @ poem_index

  hamt = await hamt.add_key(poem_kctx)

  return @[]
    await hamt.store_root('key_ref')
    poem_kctx.key_ref


async function validate_poem_with_index(opaque, poem_ref) ::
  const poem_index = cbor_decode @
    await opaque.fetch @ poem_ref

  const rt_lines = await Promise.all @
    poem_index.map @ ref =>
      opaque.fetch_utf8(ref)

  assert.deepEqual @ rt_lines, poem_lines

