const { assert, expect } = require('chai')
import { poem_lines } from '../poem.jsy'

#IF PLAT_NODEJS
  import {tahoe_opaque} from 'phorbas/esm/node/index.mjs'
  import {js_map_store} from 'phorbas/esm/node/index.mjs'

#ELIF PLAT_WEB
  import {tahoe_opaque} from 'phorbas/esm/web/index.js'
  import {js_map_store} from 'phorbas/esm/web/index.js'
  import {web_indexdb_store} from 'phorbas/esm/web/index.js'

function memstore() ::
  const store = new Map()
  return @{}
    async store_at(key, enc_content) ::
      store.set @ key, enc_content
      return true
    async fetch_at(key) ::
      return store.get @ key

describe @ 'poem', @::
  it @ 'basics', @::
    expect(poem_lines.length).to.be.at.least(2)

  it @ 'with js_map_store', @::>
    const tahoe = tahoe_opaque.with_ctx @:
      storage: await js_map_store()
      //storage: await web_idb_store()

    for const line of poem_lines ::
      const kctx = await tahoe.from_content(line)
      const ans = await kctx.store()

      const kctx2 = await tahoe.from_key(kctx.key_secret)
      const rt = await kctx2.fetch_utf8()

      expect(rt).to.be.equal(line)

  #IF PLAT_WEB
    it @ 'with web_indexdb_store', async function() ::
      const tahoe = tahoe_opaque.with_ctx @:
        storage: await web_indexdb_store()

      for const line of poem_lines ::
        const kctx = await tahoe.from_content(line)
        const ans = await kctx.store()

        const kctx2 = await tahoe.from_key(kctx.key_secret)
        const rt = await kctx2.fetch_utf8()

        expect(rt).to.be.equal(line)

  ;

