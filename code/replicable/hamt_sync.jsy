import {u8_to_hex} from 'u8-utils'

export function hamt_sync_queue(dst_root, src_root, opt={}) ::
  const batch_size = opt.batch_size || 16
  const dst_store_api = dst_root.opaque.store_api
  const src_store_api = src_root.opaque.store_api

  let active=false, count, q_node, q_leaf

  return @{}
    async prepare_sync() ::
      await active
      count = 0
      q_node = []
      q_leaf = []

    async finish_sync() ::
      await active
      q_node = q_leaf = null
      return count

    sync(ref) ::
      const {key_loc} = ref
      if undefined !== key_loc ::
        q_node.push(key_loc)
      else ::
        q_leaf.push(ref)

      if false === active ::
        active = bg_sync()

  async function bg_sync() ::
    for const i of Array(20) ::
      await null

    while q_node.length > 0 || q_leaf.length > 0 ::
      let q = q_node.splice(0, batch_size)
      if batch_size > q.length ::
        q = q.concat @ q_leaf.splice(0, batch_size - q.length)

      const keys_syncd = await dst_store_api
        .sync_absent_from @ src_store_api, q

      count += keys_syncd.length

    return active = false
